{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes \u00b6 \u6587\u6863\u521d\u8877\uff1a\u5728\u770b\u4e86\u522b\u4eba\u7684\u4f18\u79c0\u7b14\u8bb0\u540e\uff0c\u81ea\u5df1\u4e5f\u60f3\u8bb0\u5f55\u4e00\u4e9b\u5185\u5bb9\u4f9b\u81ea\u5df1\u5b66\u4e60\u4f7f\u7528\u3002","title":"\u7b80\u4ecb"},{"location":"#notes","text":"\u6587\u6863\u521d\u8877\uff1a\u5728\u770b\u4e86\u522b\u4eba\u7684\u4f18\u79c0\u7b14\u8bb0\u540e\uff0c\u81ea\u5df1\u4e5f\u60f3\u8bb0\u5f55\u4e00\u4e9b\u5185\u5bb9\u4f9b\u81ea\u5df1\u5b66\u4e60\u4f7f\u7528\u3002","title":"Notes"},{"location":"golang%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8/","text":"\u53c2\u8003\uff1a go-note Go\u8bed\u8a00\u5165\u95e8\u548c\u6df1\u5165 \u00b6 Go Roadmap \u5b66\u4e60\u8def\u7ebf\u56fe Go by Example The-way-to-go Go \u9ad8\u7ea7\u7f16\u7a0b Go 101 \u5305\u542b\u4e86\u5f88\u591a\u57fa\u7840\u548c\u9ad8\u7ea7\u4e3b\u9898 Mastering Go Go\u8bed\u8a00\u5723\u7ecf Go\u5b89\u5168\u7f16\u7a0b\u89c4\u8303 Go\u5e76\u53d1\u7f16\u7a0b Go \u5e38\u7528\u6846\u67b6(\u5de5\u5177)\u6280\u672f\u96f7\u8fbe \u2764\ufe0f \u00b6 \u6280\u672f\u9009\u578b\u4e00\u822c\u9009\u62e9\u63a5\u53e3\u7a33\u5b9a\uff0c\u6301\u7eed\u7ef4\u62a4\uff0c\u751f\u6001\u76f8\u5bf9\u6210\u719f\uff0cstar \u6570\u91cf\u8f83\u9ad8\uff0c\u7528\u6237\u5e7f\u6cdb\u7684\u5e93\uff0c\u5751\u5c11\u4e00\u70b9\u3002 \u524d\u540e\u5206\u79bb\u65f6\u4ee3\u7528 gin \u4e4b\u7c7b\u7684\u6846\u67b6\u5199app\u540e\u53f0\u8fd8\u662f\u633a\u5feb\u7684\uff0c\u4f46\u662f\u611f\u89c9\u505a\u5e76\u53d1\u4e0d\u9ad8\u7684\u5185\u90e8\u540e\u53f0\u4e1a\u52a1\u8fd8\u662f\u7528\u811a\u672cpython/php\u4e4b\u7c7b\u7684\u66f4\u5feb\u3002 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5e93\u5747\u53ef\u4ee5\u901a\u8fc7 google + \u5173\u952e\u8bcd\u641c\u7d22\u5230\uff0c\u540c\u4e00\u884c\u5c3d\u91cf\u6309\u7167\u6d41\u884c\u7a0b\u5ea6\u4ece\u524d\u5f80\u540e\u5217\u4e3e\uff0c\u9ed8\u8ba4\u90fd\u662f github \u4e0a\u7684\u5305(\u53ea\u5199\u4e86\u4ed3\u5e93\u540e\u7f00)\u3002 \u4e5f\u53ef\u4ee5\u53bb awesome-go \u4e4b\u7c7b\u7684\u53bb\u67e5\u627e\uff0c\u7136\u540e\u6839\u636e star \u6570\u76ee\u7b49\u4f5c\u4e3a\u53c2\u8003\u9009\u7528\u3002 web/rpc\u6846\u67b6: gin, grpc, beego, labstack/echo \u5fae\u670d\u52a1\u6846\u67b6\uff1ago-kit, go-micro, karatos(b \u7ad9)\uff0cgo-zero(\u597d\u672a\u6765)\uff0cjupiter(\u6597\u9c7c) \u53c2\u6570\u9a8c\u8bc1\uff1ago-playground/validator, bytedance/go-tagexpr \u5355\u5143\u6d4b\u8bd5\u65ad\u8a00\uff1amatryer/is, testify/assert, smartystreets/goconvey(bdd \u9a71\u52a8\u6d4b\u8bd5), rakyll/gotest(gotest \u989c\u8272) \u9519\u8bef\u5904\u7406: pkg/errors, hashicorp/go-multierror(\u591a\u9519\u8bef\u5904\u7406), sync/errgroup(\u591agoroutine\u9519\u8bef\u5904\u7406) \u91cd\u8bd5\uff1aavast/retry-go json\u5904\u7406\u8f6c\u6362\uff1ago-simplejson/mapstructure\uff0cjson-iterator/go (\u6bd4\u5185\u7f6e\u7684 json \u89e3\u6790\u5feb\u5f88\u591a), tidwall/gjson(\u83b7\u53d6 json \u503c) \u5b57\u5178/\u7ed3\u6784\u4f53\u5408\u5e76/\u7ed3\u6784\u4f53\u62f7\u8d1d\uff1aimdario/mergo, jinzhu/copier \u914d\u7f6e\u89e3\u6790: viper(\u517c\u5bb9\u5f88\u591a\u683c\u5f0f) mysql orm: gorm, xorm, sqlx, ent/ent(\u5b9e\u4f53\u6846\u67b6), doug-martin/goqu(\u751f\u6210sql) redis: go-redis, redigo Kafka: Shopify/sarama, confluent-kafka-go Elasticsearch: olivere/elastic, elastic/go-elasticsearch mongodb: mongodb/mongo-go-driver id\u751f\u6210\u5668: rx/xid, beinan/fastid, bwmarrin/snowflake, sony/sonyflake uuid: gofrs/uuid, satori/go.uuid, google/uuid (\u6ce8\u610f\u6709\u4e9b\u4f1a panic) hash: cespare/xxhash(\u5feb\u901f hash) cache(in memory): patrickmn/go-cache, allegro/bigcache, golang/groupcache(\u5206\u5e03\u5f0f), singleflight(\u9632\u6b62\u7f13\u5b58\u51fb\u7a7f) cache(lru/lfu/2Q/ARC): hashicorp/golang-lru, bluele/gcache, songangweb/mcache(\u589e\u5f3alru) \u5e76\u53d1/\u534f\u7a0b\u6c60(star \u6570\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f)\uff1a https://github.com/panjf2000/ants https://github.com/rafaeldias/async https://github.com/Jeffail/tunny https://github.com/benmanns/goworker https://github.com/buptmiao/parallel \u539f\u5b50\u8bbf\u95ee\uff1auber-go/atomic \u5f02\u6b65\u4efb\u52a1\u961f\u5217\u6846\u67b6: machinery, gocelery, hibiken/asynq, LMSTFY(\u7f8e\u56fe\u5f00\u6e90) \u5b9a\u65f6\u4efb\u52a1\uff1arobfig/cron, ouiqiang/gocron \u7194\u65ad\uff1ahystrix-go, eapache/go-resiliency, cep21/circuit, alibaba/sentinel-golang \u9650\u6d41\u5e93: web\u6846\u67b6\u9650\u6d41\uff1aulule/limiter, didip/tollbooth \u4ee4\u724c\u6876(token bucket)\u9650\u6d41\uff1ajuju/ratelimit, golang.org/x/time/rate \u6f0f\u6876(leaky bucket)\u9650\u6d41: uber-go/ratelimit \u65e5\u5fd7: logrus, zap, lumberjack(\u6eda\u52a8\u65e5\u5fd7) \u94fe\u8def\u8ffd\u8e2a\uff1aopentracing/opentracing-go, uber/jaeger-client-go \u8c03\u8bd5\uff1ago-spew/dlv, kr/pretty \u56fe\u7247\u5904\u7406\uff1ah2non/imaginary \u7f51\u7edc\u5e93/\u8fde\u63a5\u6c60\uff1afatih/pool; panjf2000/gnet, valyala/fasthttp\uff0ckavu/go_reuseport websocket: nhooyr.io/websocket, gorilla/websocket http client: levigross/grequests, asmcos/requests, go-resty/resty, gojek/heimdall(\u91cd\u8bd5\u3001\u7194\u65ad) \u8868\u683c\uff1ago-echarts excel(XLSX): 360EntSecGroup-Skylar/excelize, tealeg/xlsx \u8f6c\u6362\u5de5\u5177\uff1a sql2go(sql -> go struct): http://stming.cn/tool/sql2go.html curl2go(curl -> go http code): https://mholt.github.io/curl-to-go/ Json2go(json -> go struct): https://mholt.github.io/json-to-go/ \u4ee3\u7801\u68c0\u67e5\u5de5\u5177\uff1a \u9759\u6001\u68c0\u67e5\uff1agolangci-lint goroutine \u6cc4\u9732\u68c0\u67e5: github.com/uber-go/goleak \u6ce8\u91ca\u5de5\u5177: github.com/cuonglm/gocmt \u81ea\u52a8\u7ed9\u5bfc\u51fa\u53d8\u91cf\u3001\u51fd\u6570\u7b49\u589e\u52a0\u6ce8\u91ca \u70ed\u7f16\u8bd1\u5de5\u5177\uff1agowatch \u7f51\u7edc\u4ee3\u7406\uff1agoproxy \u547d\u4ee4\u884c\u5904\u7406: spf13/cobra \u5b57\u7b26\u4e32\u5904\u7406\u5de5\u5177\uff1ahuandu/xstrings \u7c7b\u578b\u8f6c\u6362\uff1aspf13/cast HTML \u5904\u7406/\u8fc7\u6ee4: PuerkitoBio/goquery, microcosm-cc/bluemonday \u7cfb\u7edf\u4fe1\u606f\u6536\u96c6\uff1ashirou/gopsutil go runtime: bmhatfield/go-runtime-metrics(runtime \u6307\u6807\u6536\u96c6) \u90ae\u4ef6\uff1agopkg.in/gomail \u63a5\u53e3\u6587\u6863\u751f\u6210\uff1aswaggo/swag \u6d88\u606f\u961f\u5217\uff1ansqio/nsq \u5ef6\u65f6\u961f\u5217/\u65f6\u95f4\u8f6e\uff1aouqiang/delay-queue, RussellLuo/timingwheel \u5206\u5e03\u5f0fkv\u5b58\u50a8\uff1aetcd \u7528\u6237\u8ba4\u8bc1\uff1agolang-jwt/jwt,dgrijalva/jwt-go(\u5f03\u7528), authelia/authelia \u8bbf\u95ee(\u6743\u9650)\u63a7\u5236\uff1acasbin/casbin \u8fdb\u7a0b\u63a7\u5236\uff1auber-go/automaxprocs \u5730\u7406\u4f4d\u7f6e\uff1aip2location/ip2location-go \u65f6\u95f4\u5904\u7406\uff1ajinzhu/now \u91d1\u878d\u6570\u5b57\u683c\u5f0f\u5316: leekchan/accounting \u5206\u5e03\u5f0f\u4e8b\u52a1\uff1ayedf/dtm \u5206\u5e03\u5f0f\u9501: go-redsync/redsync(redlock\u7b97\u6cd5) Zookeeper: go-zookeeper/zk \u8bbe\u8ba1\u6a21\u5f0f\uff1atmrts/go-patterns \u6570\u636e\u7ed3\u6784\uff1adeckarep/golang-set \u5de5\u5177: https://github.com/smallnest/gen gorm struct \u751f\u6210\u5de5\u5177\uff0c\u6839\u636e sql \u751f\u6210 struct\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u76f4\u63a5\u751f\u6210\u589e\u5220\u6539\u67e5\u7684\u4ee3\u7801 https://mholt.github.io/json-to-go/ json \u8f6c go struct https://protogen.marcgravell.com/decode proto decode \u5de5\u5177 https://gopherize.me/ \u4e00\u4e2a\u597d\u73a9\u7684\u5c0f\u5de5\u5177\uff0c\u8bbe\u8ba1\u4f60\u559c\u6b22\u7684 gopher \u5f62\u8c61 https://github.com/egonelbre/gophers \u5404\u79cd\u597d\u73a9\u7684 gopher \u5409\u7965\u7269\u56fe\u7247 https://github.com/jfeliu007/goplantuml \u4e00\u4e2a\u81ea\u52a8\u6839\u636e go \u9879\u76ee\u751f\u6210 uml \u56fe\u7684\u5de5\u5177 https://www.dumels.com/ https://github.com/TrueFurby/go-callvis \u67e5\u770b go \u7684\u8c03\u7528\u5173\u7cfb https://github.com/novalagung/gorep \u6279\u91cf\u66ff\u6362\u5f15\u5165\u7684\u5305(\u6bd4\u5982\u4fee\u6539\u4e86\u540d\u5b57\u6216\u8005\u5305\u540d\u7b49) Web/RPC\u6846\u67b6 \u00b6 gin grpc \u4e2a\u4eba\u63a8\u8350\u4f7f\u7528 gin\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b star \u9009\u62e9\u522b\u7684\u6846\u67b6 https://github.com/gin-gonic/contrib gin\u5404\u79cd\u7ec4\u4ef6 https://github.com/e421083458/gin_scaffold gin \u811a\u624b\u67b6 https://github.com/mingrammer/go-web-framework-stars Gin example \u00b6 https://github.com/EDDYCJY/go-gin-example https://github.com/vsouza/go-gin-boilerplate https://github.com/gothinkster/golang-gin-realworld-example-app https://github.com/go-programming-tour-book/blog-service \u300ago \u7f16\u7a0b\u4e4b\u65c5\u300b\u535a\u5ba2\u4ee3\u7801\u793a\u4f8b gin \u5b9e\u6218\u535a\u5ba2: https://segmentfault.com/a/1190000013808421 gin \u8fde\u8f7d\u535a\u5ba2 https://www.cnblogs.com/xinliangcoder/p/11212573.html logrus\u65e5\u5fd7 https://marcoma.xyz/2019/03/17/gin-tutorial-7/","title":"\u5165\u95e8"},{"location":"golang%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8/#go","text":"Go Roadmap \u5b66\u4e60\u8def\u7ebf\u56fe Go by Example The-way-to-go Go \u9ad8\u7ea7\u7f16\u7a0b Go 101 \u5305\u542b\u4e86\u5f88\u591a\u57fa\u7840\u548c\u9ad8\u7ea7\u4e3b\u9898 Mastering Go Go\u8bed\u8a00\u5723\u7ecf Go\u5b89\u5168\u7f16\u7a0b\u89c4\u8303 Go\u5e76\u53d1\u7f16\u7a0b","title":"Go\u8bed\u8a00\u5165\u95e8\u548c\u6df1\u5165"},{"location":"golang%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8/#go_1","text":"\u6280\u672f\u9009\u578b\u4e00\u822c\u9009\u62e9\u63a5\u53e3\u7a33\u5b9a\uff0c\u6301\u7eed\u7ef4\u62a4\uff0c\u751f\u6001\u76f8\u5bf9\u6210\u719f\uff0cstar \u6570\u91cf\u8f83\u9ad8\uff0c\u7528\u6237\u5e7f\u6cdb\u7684\u5e93\uff0c\u5751\u5c11\u4e00\u70b9\u3002 \u524d\u540e\u5206\u79bb\u65f6\u4ee3\u7528 gin \u4e4b\u7c7b\u7684\u6846\u67b6\u5199app\u540e\u53f0\u8fd8\u662f\u633a\u5feb\u7684\uff0c\u4f46\u662f\u611f\u89c9\u505a\u5e76\u53d1\u4e0d\u9ad8\u7684\u5185\u90e8\u540e\u53f0\u4e1a\u52a1\u8fd8\u662f\u7528\u811a\u672cpython/php\u4e4b\u7c7b\u7684\u66f4\u5feb\u3002 \u4ee5\u4e0b\u7b2c\u4e09\u65b9\u5e93\u5747\u53ef\u4ee5\u901a\u8fc7 google + \u5173\u952e\u8bcd\u641c\u7d22\u5230\uff0c\u540c\u4e00\u884c\u5c3d\u91cf\u6309\u7167\u6d41\u884c\u7a0b\u5ea6\u4ece\u524d\u5f80\u540e\u5217\u4e3e\uff0c\u9ed8\u8ba4\u90fd\u662f github \u4e0a\u7684\u5305(\u53ea\u5199\u4e86\u4ed3\u5e93\u540e\u7f00)\u3002 \u4e5f\u53ef\u4ee5\u53bb awesome-go \u4e4b\u7c7b\u7684\u53bb\u67e5\u627e\uff0c\u7136\u540e\u6839\u636e star \u6570\u76ee\u7b49\u4f5c\u4e3a\u53c2\u8003\u9009\u7528\u3002 web/rpc\u6846\u67b6: gin, grpc, beego, labstack/echo \u5fae\u670d\u52a1\u6846\u67b6\uff1ago-kit, go-micro, karatos(b \u7ad9)\uff0cgo-zero(\u597d\u672a\u6765)\uff0cjupiter(\u6597\u9c7c) \u53c2\u6570\u9a8c\u8bc1\uff1ago-playground/validator, bytedance/go-tagexpr \u5355\u5143\u6d4b\u8bd5\u65ad\u8a00\uff1amatryer/is, testify/assert, smartystreets/goconvey(bdd \u9a71\u52a8\u6d4b\u8bd5), rakyll/gotest(gotest \u989c\u8272) \u9519\u8bef\u5904\u7406: pkg/errors, hashicorp/go-multierror(\u591a\u9519\u8bef\u5904\u7406), sync/errgroup(\u591agoroutine\u9519\u8bef\u5904\u7406) \u91cd\u8bd5\uff1aavast/retry-go json\u5904\u7406\u8f6c\u6362\uff1ago-simplejson/mapstructure\uff0cjson-iterator/go (\u6bd4\u5185\u7f6e\u7684 json \u89e3\u6790\u5feb\u5f88\u591a), tidwall/gjson(\u83b7\u53d6 json \u503c) \u5b57\u5178/\u7ed3\u6784\u4f53\u5408\u5e76/\u7ed3\u6784\u4f53\u62f7\u8d1d\uff1aimdario/mergo, jinzhu/copier \u914d\u7f6e\u89e3\u6790: viper(\u517c\u5bb9\u5f88\u591a\u683c\u5f0f) mysql orm: gorm, xorm, sqlx, ent/ent(\u5b9e\u4f53\u6846\u67b6), doug-martin/goqu(\u751f\u6210sql) redis: go-redis, redigo Kafka: Shopify/sarama, confluent-kafka-go Elasticsearch: olivere/elastic, elastic/go-elasticsearch mongodb: mongodb/mongo-go-driver id\u751f\u6210\u5668: rx/xid, beinan/fastid, bwmarrin/snowflake, sony/sonyflake uuid: gofrs/uuid, satori/go.uuid, google/uuid (\u6ce8\u610f\u6709\u4e9b\u4f1a panic) hash: cespare/xxhash(\u5feb\u901f hash) cache(in memory): patrickmn/go-cache, allegro/bigcache, golang/groupcache(\u5206\u5e03\u5f0f), singleflight(\u9632\u6b62\u7f13\u5b58\u51fb\u7a7f) cache(lru/lfu/2Q/ARC): hashicorp/golang-lru, bluele/gcache, songangweb/mcache(\u589e\u5f3alru) \u5e76\u53d1/\u534f\u7a0b\u6c60(star \u6570\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f)\uff1a https://github.com/panjf2000/ants https://github.com/rafaeldias/async https://github.com/Jeffail/tunny https://github.com/benmanns/goworker https://github.com/buptmiao/parallel \u539f\u5b50\u8bbf\u95ee\uff1auber-go/atomic \u5f02\u6b65\u4efb\u52a1\u961f\u5217\u6846\u67b6: machinery, gocelery, hibiken/asynq, LMSTFY(\u7f8e\u56fe\u5f00\u6e90) \u5b9a\u65f6\u4efb\u52a1\uff1arobfig/cron, ouiqiang/gocron \u7194\u65ad\uff1ahystrix-go, eapache/go-resiliency, cep21/circuit, alibaba/sentinel-golang \u9650\u6d41\u5e93: web\u6846\u67b6\u9650\u6d41\uff1aulule/limiter, didip/tollbooth \u4ee4\u724c\u6876(token bucket)\u9650\u6d41\uff1ajuju/ratelimit, golang.org/x/time/rate \u6f0f\u6876(leaky bucket)\u9650\u6d41: uber-go/ratelimit \u65e5\u5fd7: logrus, zap, lumberjack(\u6eda\u52a8\u65e5\u5fd7) \u94fe\u8def\u8ffd\u8e2a\uff1aopentracing/opentracing-go, uber/jaeger-client-go \u8c03\u8bd5\uff1ago-spew/dlv, kr/pretty \u56fe\u7247\u5904\u7406\uff1ah2non/imaginary \u7f51\u7edc\u5e93/\u8fde\u63a5\u6c60\uff1afatih/pool; panjf2000/gnet, valyala/fasthttp\uff0ckavu/go_reuseport websocket: nhooyr.io/websocket, gorilla/websocket http client: levigross/grequests, asmcos/requests, go-resty/resty, gojek/heimdall(\u91cd\u8bd5\u3001\u7194\u65ad) \u8868\u683c\uff1ago-echarts excel(XLSX): 360EntSecGroup-Skylar/excelize, tealeg/xlsx \u8f6c\u6362\u5de5\u5177\uff1a sql2go(sql -> go struct): http://stming.cn/tool/sql2go.html curl2go(curl -> go http code): https://mholt.github.io/curl-to-go/ Json2go(json -> go struct): https://mholt.github.io/json-to-go/ \u4ee3\u7801\u68c0\u67e5\u5de5\u5177\uff1a \u9759\u6001\u68c0\u67e5\uff1agolangci-lint goroutine \u6cc4\u9732\u68c0\u67e5: github.com/uber-go/goleak \u6ce8\u91ca\u5de5\u5177: github.com/cuonglm/gocmt \u81ea\u52a8\u7ed9\u5bfc\u51fa\u53d8\u91cf\u3001\u51fd\u6570\u7b49\u589e\u52a0\u6ce8\u91ca \u70ed\u7f16\u8bd1\u5de5\u5177\uff1agowatch \u7f51\u7edc\u4ee3\u7406\uff1agoproxy \u547d\u4ee4\u884c\u5904\u7406: spf13/cobra \u5b57\u7b26\u4e32\u5904\u7406\u5de5\u5177\uff1ahuandu/xstrings \u7c7b\u578b\u8f6c\u6362\uff1aspf13/cast HTML \u5904\u7406/\u8fc7\u6ee4: PuerkitoBio/goquery, microcosm-cc/bluemonday \u7cfb\u7edf\u4fe1\u606f\u6536\u96c6\uff1ashirou/gopsutil go runtime: bmhatfield/go-runtime-metrics(runtime \u6307\u6807\u6536\u96c6) \u90ae\u4ef6\uff1agopkg.in/gomail \u63a5\u53e3\u6587\u6863\u751f\u6210\uff1aswaggo/swag \u6d88\u606f\u961f\u5217\uff1ansqio/nsq \u5ef6\u65f6\u961f\u5217/\u65f6\u95f4\u8f6e\uff1aouqiang/delay-queue, RussellLuo/timingwheel \u5206\u5e03\u5f0fkv\u5b58\u50a8\uff1aetcd \u7528\u6237\u8ba4\u8bc1\uff1agolang-jwt/jwt,dgrijalva/jwt-go(\u5f03\u7528), authelia/authelia \u8bbf\u95ee(\u6743\u9650)\u63a7\u5236\uff1acasbin/casbin \u8fdb\u7a0b\u63a7\u5236\uff1auber-go/automaxprocs \u5730\u7406\u4f4d\u7f6e\uff1aip2location/ip2location-go \u65f6\u95f4\u5904\u7406\uff1ajinzhu/now \u91d1\u878d\u6570\u5b57\u683c\u5f0f\u5316: leekchan/accounting \u5206\u5e03\u5f0f\u4e8b\u52a1\uff1ayedf/dtm \u5206\u5e03\u5f0f\u9501: go-redsync/redsync(redlock\u7b97\u6cd5) Zookeeper: go-zookeeper/zk \u8bbe\u8ba1\u6a21\u5f0f\uff1atmrts/go-patterns \u6570\u636e\u7ed3\u6784\uff1adeckarep/golang-set \u5de5\u5177: https://github.com/smallnest/gen gorm struct \u751f\u6210\u5de5\u5177\uff0c\u6839\u636e sql \u751f\u6210 struct\uff0c\u751a\u81f3\u8fd8\u53ef\u4ee5\u76f4\u63a5\u751f\u6210\u589e\u5220\u6539\u67e5\u7684\u4ee3\u7801 https://mholt.github.io/json-to-go/ json \u8f6c go struct https://protogen.marcgravell.com/decode proto decode \u5de5\u5177 https://gopherize.me/ \u4e00\u4e2a\u597d\u73a9\u7684\u5c0f\u5de5\u5177\uff0c\u8bbe\u8ba1\u4f60\u559c\u6b22\u7684 gopher \u5f62\u8c61 https://github.com/egonelbre/gophers \u5404\u79cd\u597d\u73a9\u7684 gopher \u5409\u7965\u7269\u56fe\u7247 https://github.com/jfeliu007/goplantuml \u4e00\u4e2a\u81ea\u52a8\u6839\u636e go \u9879\u76ee\u751f\u6210 uml \u56fe\u7684\u5de5\u5177 https://www.dumels.com/ https://github.com/TrueFurby/go-callvis \u67e5\u770b go \u7684\u8c03\u7528\u5173\u7cfb https://github.com/novalagung/gorep \u6279\u91cf\u66ff\u6362\u5f15\u5165\u7684\u5305(\u6bd4\u5982\u4fee\u6539\u4e86\u540d\u5b57\u6216\u8005\u5305\u540d\u7b49)","title":"Go \u5e38\u7528\u6846\u67b6(\u5de5\u5177)\u6280\u672f\u96f7\u8fbe \u2764\ufe0f"},{"location":"golang%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8/#webrpc","text":"gin grpc \u4e2a\u4eba\u63a8\u8350\u4f7f\u7528 gin\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b star \u9009\u62e9\u522b\u7684\u6846\u67b6 https://github.com/gin-gonic/contrib gin\u5404\u79cd\u7ec4\u4ef6 https://github.com/e421083458/gin_scaffold gin \u811a\u624b\u67b6 https://github.com/mingrammer/go-web-framework-stars","title":"Web/RPC\u6846\u67b6"},{"location":"golang%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8/#gin-example","text":"https://github.com/EDDYCJY/go-gin-example https://github.com/vsouza/go-gin-boilerplate https://github.com/gothinkster/golang-gin-realworld-example-app https://github.com/go-programming-tour-book/blog-service \u300ago \u7f16\u7a0b\u4e4b\u65c5\u300b\u535a\u5ba2\u4ee3\u7801\u793a\u4f8b gin \u5b9e\u6218\u535a\u5ba2: https://segmentfault.com/a/1190000013808421 gin \u8fde\u8f7d\u535a\u5ba2 https://www.cnblogs.com/xinliangcoder/p/11212573.html logrus\u65e5\u5fd7 https://marcoma.xyz/2019/03/17/gin-tutorial-7/","title":"Gin example"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/","text":"\u6982\u5ff5 \u00b6 WSGI \u7684\u5168\u79f0 web server gateway interface\uff08web\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff09 \uff0c\u662f\u4e00\u79cd\u89c4\u8303\u534f\u8bae\uff0c\u7528\u4e8e\u63cf\u8ff0web\u670d\u52a1\u5668\uff08\u5982Nginx\u3001uWSGI\u7b49\u670d\u52a1\u5668\uff09\u5982\u4f55\u4e0eweb\u5e94\u7528\u7a0b\u5e8f\uff08\u5982Django\u3001Flask\uff09\u901a\u4fe1\u3002 \u5982\u4f55\u5b9e\u73b0wsgi\u534f\u8bae\uff1f server\u548capplication\u7684\u89c4\u8303\u5728 PEP3333 \u4e2d\u6709\u5177\u4f53\u63cf\u8ff0\uff0c\u8981\u5b9e\u73b0WSGI\u534f\u8bae\uff0c\u5fc5\u987b\u540c\u65f6\u5b9e\u73b0web server\u548cweb application\uff0c\u5f53\u524d\u8fd0\u884c\u5728WSGI\u534f\u8bae\u4e4b\u4e0a\u7684web\u6846\u67b6\u6709Flask, Django\u3002\u3002 \u00b6 uWSGI \u00b6 \u6587\u6863\uff1a https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html uWSGI \u662f\u4e00\u4e2a\u5168\u529f\u80fd\u7684HTTP\u670d\u52a1\u5668\u3002\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u3001uwsgi\u534f\u8bae\u3001http\u534f\u8bae\u7b49\u3002\u4e3b\u8981\u4f5c\u7528\u662f\u628aHTTP\u534f\u8bae\u8f6c\u5316\u6210\u8bed\u8a00\u652f\u6301\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u6bd4\u5982\u628aHTTP\u534f\u8bae\u8f6c\u5316\u6210WSGI\u534f\u8bae\uff0c\u8ba9Python\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 uwsgi \uff08\u5168\u5c0f\u5199\uff09\u662f uWSGI \u7528\u6765\u4e0e\u5176\u4ed6\u670d\u52a1\u5668\u901a\u4fe1\u7684\u672c\u673a\u4e8c\u8fdb\u5236\u534f\u8bae\u3002 uWSGI\u4e0e\u4e0eNginx\u3001django\u5173\u7cfb\uff1a Nginx\uff1a\u53cd\u5411\u4ee3\u7406\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u7f13\u5b58\u9759\u6001\u8d44\u6e90\u3002 uWSGI \u901a\u5e38\u7528\u4e8e\u4e0eWeb \u670d\u52a1\u5668\uff08\u4f8b\u5982Nginx \uff09\u4e00\u8d77\u4e3aPythonWeb \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u4e3auWSGI \u7684\u672c\u673a uwsgi \u534f\u8bae\u63d0\u4f9b\u76f4\u63a5\u652f\u6301 \u6570\u636e\u53ef\u80fd\u8fd9\u6837\u6d41\u52a8\uff1abrower => nginx => uWSGI => pythonWSGIModule => pythonApplication \u7b80\u5355\u4f7f\u7528 \u00b6 \u5b89\u88c5 pip install uwsgi \u6d4b\u8bd5\uff1a1.\u7f16\u5199test.py\uff0c\u7c7b\u4f3c\u4ee5\u4e0b\uff1b2.\u542f\u52a8 uwsgi --http :8080 --wsgi-file test.py def application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b\"Hello World\"] \u914d\u7f6e\u6587\u4ef6\u542f\u52a8\uff1a ini\uff1a uwsgi --ini uwsgi.ini xml: uwsgi uwsgi.xml \u914d\u7f6e\u9009\u9879 \u00b6 \u6587\u6863\uff1a https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/Options.html ini\u683c\u5f0f\u53c2\u6570\u8bf4\u660e uid=www-data # Ubuntu\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7528\u6237\u540d gid=www-data # Ubuntu\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7528\u6237\u7ec4 project=mysite1 # \u9879\u76ee\u540d base = /home/user1 # \u9879\u76ee\u6839\u76ee\u5f55 home = %(base)/Env/%(project) # \u8bbe\u7f6e\u9879\u76ee\u865a\u62df\u73af\u5883,Docker\u90e8\u7f72\u65f6\u4e0d\u9700\u8981 chdir=%(base)/%(project) # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 module=%(project).wsgi:application # wsgi\u6587\u4ef6\u4f4d\u7f6e master=True # \u4e3b\u8fdb\u7a0b processes=2 # \u540c\u65f6\u8fdb\u884c\u7684\u8fdb\u7a0b\u6570\uff0c\u4e00\u822c # \u9009\u98791, \u4f7f\u7528unix socket\u4e0enginx\u901a\u4fe1\uff0c\u4ec5\u9650\u4e8euwsgi\u548cnginx\u5728\u540c\u4e00\u4e3b\u673a\u4e0a\u60c5\u5f62 # Nginx\u914d\u7f6e\u4e2duwsgi_pass\u5e94\u6307\u5411\u540c\u4e00socket\u6587\u4ef6 socket=/run/uwsgi/%(project).sock # \u9009\u98792\uff0c\u4f7f\u7528TCP socket\u4e0enginx\u901a\u4fe1 # Nginx\u914d\u7f6e\u4e2duwsgi_pass\u5e94\u6307\u5411uWSGI\u670d\u52a1\u5668IP\u548c\u7aef\u53e3 # socket=0.0.0.0:8000 \u6216\u5219 socket=:8000 # \u9009\u98793\uff0c\u4f7f\u7528http\u534f\u8bae\u4e0enginx\u901a\u4fe1 # Nginx\u914d\u7f6e\u4e2dproxy_pass\u5e94\u6307\u5411uWSGI\u670d\u52a1\u5668\u4e00IP\u548c\u7aef\u53e3 # http=0.0.0.0:8000 # socket\u6743\u9650\u8bbe\u7f6e chown-socket=%(uid):www-data chmod-socket=664 # \u8fdb\u7a0b\u6587\u4ef6 pidfile=/tmp/%(project)-master.pid # \u4ee5\u540e\u53f0\u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\uff0c\u5e76\u5c06log\u65e5\u5fd7\u5b58\u4e8etemp\u6587\u4ef6\u5939\u3002 daemonize=/var/log/uwsgi/%(project).log # \u670d\u52a1\u505c\u6b62\u65f6\uff0c\u81ea\u52a8\u79fb\u9664unix socket\u548cpid\u6587\u4ef6 vacuum=True # \u4e3a\u6bcf\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u8bbe\u7f6e\u8bf7\u6c42\u6570\u7684\u4e0a\u9650\u3002\u5f53\u5904\u7406\u7684\u8bf7\u6c42\u603b\u6570\u8d85\u8fc7\u8fd9\u4e2a\u91cf\uff0c\u8fdb\u7a0b\u56de\u6536\u91cd\u542f\u3002 max-requests=5000 # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u82b1\u8d39\u7684\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002 harakiri=60 #\u5f53\u4e00\u4e2a\u8bf7\u6c42\u88abharakiri\u6740\u6389\u4f1a\uff0c\u4f1a\u8f93\u51fa\u4e00\u6761\u65e5\u5fd7 harakiri-verbose=true # uWsgi\u9ed8\u8ba4\u7684buffersize\u4e3a4096\uff0c\u5982\u679c\u8bf7\u6c42\u6570\u636e\u8d85\u8fc7\u8fd9\u4e2a\u91cf\u4f1a\u62a5\u9519\u3002\u8fd9\u91cc\u8bbe\u7f6e\u4e3a64k buffer-size=65536 # \u5982\u679chttp\u8bf7\u6c42\u4f53\u7684\u5927\u5c0f\u8d85\u8fc7\u6307\u5b9a\u7684\u9650\u5236\uff0c\u6253\u5f00http body\u7f13\u51b2\uff0c\u8fd9\u91cc\u4e3a64k post-buffering=65536 #\u5f00\u542f\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u62a5\u544a memory-report=true #\u8bbe\u7f6e\u5e73\u6ed1\u7684\u91cd\u542f\uff08\u76f4\u5230\u5904\u7406\u5b8c\u63a5\u6536\u5230\u7684\u8bf7\u6c42\uff09\u7684\u957f\u7b49\u5f85\u65f6\u95f4(\u79d2) reload-mercy=10 #\u8bbe\u7f6e\u5de5\u4f5c\u8fdb\u7a0b\u4f7f\u7528\u865a\u62df\u5185\u5b58\u8d85\u8fc7\u591a\u5c11MB\u5c31\u56de\u6536\u91cd\u542f reload-on-as=1024 xml\u683c\u5f0f\u6837\u4f8b <uwsgi> <socket>:8000</socket> <listen>100</listen> <master>true</master> <processes>4</processes> <buffer-size>16384</buffer-size> <post-buffering>4096</post-buffering> <post-buffering-bufsize>16384</post-buffering-bufsize> <max-requests>1000</max-requests> <limit-as>1024</limit-as> <reload-mercy>3</reload-mercy> <harakiri>60</harakiri> <lazy/> <lock-engine>ipcsem</lock-engine> <log-maxsize>2147483647</log-maxsize> <log-slow>500</log-slow> <log-4xx/> <log-5xx/> <reload-on-as>512</reload-on-as> <reload-on-rss>512</reload-on-rss> <close-on-exec/> <cache2>name=my_site,items=10000,bitmap=1,blocksize=2000,sweep_on_full=1,lazy=1</cache2> <cache-expire-freq>6</cache-expire-freq> <cache-blocksize>2000</cache-blocksize> <chdir>/site/</chdir> <pythonpath>/site/</pythonpath> <env>DJANGO_SETTINGS_MODULE=Myapp.settings</env> <single-interpreter>true</single-interpreter> <thunder-lock/> <enable-threads>true</enable-threads> <wsgi-file>/site/Myapp/wsgi.py</wsgi-file> </uwsgi> \u90e8\u7f72\u4e0e\u76d1\u63a7 \u00b6 \u4e0eNginx\u90e8\u7f72 \u00b6 uWSGI\u548cNginx\u4e4b\u95f4\u6709\u591a\u79cd\u901a\u4fe1\u65b9\u5f0f, unix socket\uff0chttp-socket\u548chttp\u3002Nginx\u7684\u914d\u7f6e\u5fc5\u9700\u4e0euwsgi\u914d\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 \u9009\u98791\uff0c\u5982\u679c\u4f60\u7684nginx\u4e0euwsgi\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4f18\u5148\u4f7f\u7528\u672c\u5730\u673a\u5668\u7684unix socket\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u6837\u901f\u5ea6\u66f4\u5feb\u3002\u6b64\u65f6nginx\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a location / { include /etc/nginx/uwsgi_params; uwsgi_pass unix:/run/uwsgi/django_test1.sock; } \u9009\u98792\uff0c\u5982\u679cnginx\u4e0euwsgi\u4e0d\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4e24\u8005\u4f7f\u7528TCP socket\u901a\u4fe1\uff0cnginx\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u914d\u7f6e\uff1a location / { include /etc/nginx/uwsgi_params; uwsgi_pass uWSGI_SERVER_IP:8000; } \u9009\u98793\uff0c\u5982\u679cnginx\u4e0euwsgi\u4e0d\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4e24\u8005\u4f7f\u7528http\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\uff0cnginx\u914d\u7f6e\u5e94\u4fee\u6539\u5982\u4e0b\uff1a location / { # \u6ce8\u610f\uff1aproxy_pass\u540e\u9762http\u5fc5\u4e0d\u53ef\u5c11\u54e6\uff01 proxy_pass http://uWSGI_SERVER_IP:8000; } \u76d1\u6d4b\uff1a \u00b6 uwsgitop\uff1a https://github.com/xrmx/uwsgitop django+uwsgi\uff1a https://github.com/unbit/django-uwsgi","title":"wsgi"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_1","text":"WSGI \u7684\u5168\u79f0 web server gateway interface\uff08web\u670d\u52a1\u5668\u7f51\u5173\u63a5\u53e3\uff09 \uff0c\u662f\u4e00\u79cd\u89c4\u8303\u534f\u8bae\uff0c\u7528\u4e8e\u63cf\u8ff0web\u670d\u52a1\u5668\uff08\u5982Nginx\u3001uWSGI\u7b49\u670d\u52a1\u5668\uff09\u5982\u4f55\u4e0eweb\u5e94\u7528\u7a0b\u5e8f\uff08\u5982Django\u3001Flask\uff09\u901a\u4fe1\u3002 \u5982\u4f55\u5b9e\u73b0wsgi\u534f\u8bae\uff1f server\u548capplication\u7684\u89c4\u8303\u5728 PEP3333 \u4e2d\u6709\u5177\u4f53\u63cf\u8ff0\uff0c\u8981\u5b9e\u73b0WSGI\u534f\u8bae\uff0c\u5fc5\u987b\u540c\u65f6\u5b9e\u73b0web server\u548cweb application\uff0c\u5f53\u524d\u8fd0\u884c\u5728WSGI\u534f\u8bae\u4e4b\u4e0a\u7684web\u6846\u67b6\u6709Flask, Django\u3002\u3002","title":"\u6982\u5ff5"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_2","text":"","title":""},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#uwsgi","text":"\u6587\u6863\uff1a https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html uWSGI \u662f\u4e00\u4e2a\u5168\u529f\u80fd\u7684HTTP\u670d\u52a1\u5668\u3002\u5b9e\u73b0\u4e86WSGI\u534f\u8bae\u3001uwsgi\u534f\u8bae\u3001http\u534f\u8bae\u7b49\u3002\u4e3b\u8981\u4f5c\u7528\u662f\u628aHTTP\u534f\u8bae\u8f6c\u5316\u6210\u8bed\u8a00\u652f\u6301\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u6bd4\u5982\u628aHTTP\u534f\u8bae\u8f6c\u5316\u6210WSGI\u534f\u8bae\uff0c\u8ba9Python\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 uwsgi \uff08\u5168\u5c0f\u5199\uff09\u662f uWSGI \u7528\u6765\u4e0e\u5176\u4ed6\u670d\u52a1\u5668\u901a\u4fe1\u7684\u672c\u673a\u4e8c\u8fdb\u5236\u534f\u8bae\u3002 uWSGI\u4e0e\u4e0eNginx\u3001django\u5173\u7cfb\uff1a Nginx\uff1a\u53cd\u5411\u4ee3\u7406\u3001\u8d1f\u8f7d\u5747\u8861\u3001\u7f13\u5b58\u9759\u6001\u8d44\u6e90\u3002 uWSGI \u901a\u5e38\u7528\u4e8e\u4e0eWeb \u670d\u52a1\u5668\uff08\u4f8b\u5982Nginx \uff09\u4e00\u8d77\u4e3aPythonWeb \u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u4e3auWSGI \u7684\u672c\u673a uwsgi \u534f\u8bae\u63d0\u4f9b\u76f4\u63a5\u652f\u6301 \u6570\u636e\u53ef\u80fd\u8fd9\u6837\u6d41\u52a8\uff1abrower => nginx => uWSGI => pythonWSGIModule => pythonApplication","title":"uWSGI"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_3","text":"\u5b89\u88c5 pip install uwsgi \u6d4b\u8bd5\uff1a1.\u7f16\u5199test.py\uff0c\u7c7b\u4f3c\u4ee5\u4e0b\uff1b2.\u542f\u52a8 uwsgi --http :8080 --wsgi-file test.py def application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b\"Hello World\"] \u914d\u7f6e\u6587\u4ef6\u542f\u52a8\uff1a ini\uff1a uwsgi --ini uwsgi.ini xml: uwsgi uwsgi.xml","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_4","text":"\u6587\u6863\uff1a https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/Options.html ini\u683c\u5f0f\u53c2\u6570\u8bf4\u660e uid=www-data # Ubuntu\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7528\u6237\u540d gid=www-data # Ubuntu\u7cfb\u7edf\u4e0b\u9ed8\u8ba4\u7528\u6237\u7ec4 project=mysite1 # \u9879\u76ee\u540d base = /home/user1 # \u9879\u76ee\u6839\u76ee\u5f55 home = %(base)/Env/%(project) # \u8bbe\u7f6e\u9879\u76ee\u865a\u62df\u73af\u5883,Docker\u90e8\u7f72\u65f6\u4e0d\u9700\u8981 chdir=%(base)/%(project) # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 module=%(project).wsgi:application # wsgi\u6587\u4ef6\u4f4d\u7f6e master=True # \u4e3b\u8fdb\u7a0b processes=2 # \u540c\u65f6\u8fdb\u884c\u7684\u8fdb\u7a0b\u6570\uff0c\u4e00\u822c # \u9009\u98791, \u4f7f\u7528unix socket\u4e0enginx\u901a\u4fe1\uff0c\u4ec5\u9650\u4e8euwsgi\u548cnginx\u5728\u540c\u4e00\u4e3b\u673a\u4e0a\u60c5\u5f62 # Nginx\u914d\u7f6e\u4e2duwsgi_pass\u5e94\u6307\u5411\u540c\u4e00socket\u6587\u4ef6 socket=/run/uwsgi/%(project).sock # \u9009\u98792\uff0c\u4f7f\u7528TCP socket\u4e0enginx\u901a\u4fe1 # Nginx\u914d\u7f6e\u4e2duwsgi_pass\u5e94\u6307\u5411uWSGI\u670d\u52a1\u5668IP\u548c\u7aef\u53e3 # socket=0.0.0.0:8000 \u6216\u5219 socket=:8000 # \u9009\u98793\uff0c\u4f7f\u7528http\u534f\u8bae\u4e0enginx\u901a\u4fe1 # Nginx\u914d\u7f6e\u4e2dproxy_pass\u5e94\u6307\u5411uWSGI\u670d\u52a1\u5668\u4e00IP\u548c\u7aef\u53e3 # http=0.0.0.0:8000 # socket\u6743\u9650\u8bbe\u7f6e chown-socket=%(uid):www-data chmod-socket=664 # \u8fdb\u7a0b\u6587\u4ef6 pidfile=/tmp/%(project)-master.pid # \u4ee5\u540e\u53f0\u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\uff0c\u5e76\u5c06log\u65e5\u5fd7\u5b58\u4e8etemp\u6587\u4ef6\u5939\u3002 daemonize=/var/log/uwsgi/%(project).log # \u670d\u52a1\u505c\u6b62\u65f6\uff0c\u81ea\u52a8\u79fb\u9664unix socket\u548cpid\u6587\u4ef6 vacuum=True # \u4e3a\u6bcf\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u8bbe\u7f6e\u8bf7\u6c42\u6570\u7684\u4e0a\u9650\u3002\u5f53\u5904\u7406\u7684\u8bf7\u6c42\u603b\u6570\u8d85\u8fc7\u8fd9\u4e2a\u91cf\uff0c\u8fdb\u7a0b\u56de\u6536\u91cd\u542f\u3002 max-requests=5000 # \u5f53\u4e00\u4e2a\u8bf7\u6c42\u82b1\u8d39\u7684\u65f6\u95f4\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bf7\u6c42\u90fd\u4f1a\u88ab\u4e22\u5f03\u3002 harakiri=60 #\u5f53\u4e00\u4e2a\u8bf7\u6c42\u88abharakiri\u6740\u6389\u4f1a\uff0c\u4f1a\u8f93\u51fa\u4e00\u6761\u65e5\u5fd7 harakiri-verbose=true # uWsgi\u9ed8\u8ba4\u7684buffersize\u4e3a4096\uff0c\u5982\u679c\u8bf7\u6c42\u6570\u636e\u8d85\u8fc7\u8fd9\u4e2a\u91cf\u4f1a\u62a5\u9519\u3002\u8fd9\u91cc\u8bbe\u7f6e\u4e3a64k buffer-size=65536 # \u5982\u679chttp\u8bf7\u6c42\u4f53\u7684\u5927\u5c0f\u8d85\u8fc7\u6307\u5b9a\u7684\u9650\u5236\uff0c\u6253\u5f00http body\u7f13\u51b2\uff0c\u8fd9\u91cc\u4e3a64k post-buffering=65536 #\u5f00\u542f\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\u62a5\u544a memory-report=true #\u8bbe\u7f6e\u5e73\u6ed1\u7684\u91cd\u542f\uff08\u76f4\u5230\u5904\u7406\u5b8c\u63a5\u6536\u5230\u7684\u8bf7\u6c42\uff09\u7684\u957f\u7b49\u5f85\u65f6\u95f4(\u79d2) reload-mercy=10 #\u8bbe\u7f6e\u5de5\u4f5c\u8fdb\u7a0b\u4f7f\u7528\u865a\u62df\u5185\u5b58\u8d85\u8fc7\u591a\u5c11MB\u5c31\u56de\u6536\u91cd\u542f reload-on-as=1024 xml\u683c\u5f0f\u6837\u4f8b <uwsgi> <socket>:8000</socket> <listen>100</listen> <master>true</master> <processes>4</processes> <buffer-size>16384</buffer-size> <post-buffering>4096</post-buffering> <post-buffering-bufsize>16384</post-buffering-bufsize> <max-requests>1000</max-requests> <limit-as>1024</limit-as> <reload-mercy>3</reload-mercy> <harakiri>60</harakiri> <lazy/> <lock-engine>ipcsem</lock-engine> <log-maxsize>2147483647</log-maxsize> <log-slow>500</log-slow> <log-4xx/> <log-5xx/> <reload-on-as>512</reload-on-as> <reload-on-rss>512</reload-on-rss> <close-on-exec/> <cache2>name=my_site,items=10000,bitmap=1,blocksize=2000,sweep_on_full=1,lazy=1</cache2> <cache-expire-freq>6</cache-expire-freq> <cache-blocksize>2000</cache-blocksize> <chdir>/site/</chdir> <pythonpath>/site/</pythonpath> <env>DJANGO_SETTINGS_MODULE=Myapp.settings</env> <single-interpreter>true</single-interpreter> <thunder-lock/> <enable-threads>true</enable-threads> <wsgi-file>/site/Myapp/wsgi.py</wsgi-file> </uwsgi>","title":"\u914d\u7f6e\u9009\u9879"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_5","text":"","title":"\u90e8\u7f72\u4e0e\u76d1\u63a7"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#nginx","text":"uWSGI\u548cNginx\u4e4b\u95f4\u6709\u591a\u79cd\u901a\u4fe1\u65b9\u5f0f, unix socket\uff0chttp-socket\u548chttp\u3002Nginx\u7684\u914d\u7f6e\u5fc5\u9700\u4e0euwsgi\u914d\u7f6e\u4fdd\u6301\u4e00\u81f4\u3002 \u9009\u98791\uff0c\u5982\u679c\u4f60\u7684nginx\u4e0euwsgi\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4f18\u5148\u4f7f\u7528\u672c\u5730\u673a\u5668\u7684unix socket\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u6837\u901f\u5ea6\u66f4\u5feb\u3002\u6b64\u65f6nginx\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a location / { include /etc/nginx/uwsgi_params; uwsgi_pass unix:/run/uwsgi/django_test1.sock; } \u9009\u98792\uff0c\u5982\u679cnginx\u4e0euwsgi\u4e0d\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4e24\u8005\u4f7f\u7528TCP socket\u901a\u4fe1\uff0cnginx\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u914d\u7f6e\uff1a location / { include /etc/nginx/uwsgi_params; uwsgi_pass uWSGI_SERVER_IP:8000; } \u9009\u98793\uff0c\u5982\u679cnginx\u4e0euwsgi\u4e0d\u5728\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4e24\u8005\u4f7f\u7528http\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\uff0cnginx\u914d\u7f6e\u5e94\u4fee\u6539\u5982\u4e0b\uff1a location / { # \u6ce8\u610f\uff1aproxy_pass\u540e\u9762http\u5fc5\u4e0d\u53ef\u5c11\u54e6\uff01 proxy_pass http://uWSGI_SERVER_IP:8000; }","title":"\u4e0eNginx\u90e8\u7f72"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/wsgi/#_6","text":"uwsgitop\uff1a https://github.com/xrmx/uwsgitop django+uwsgi\uff1a https://github.com/unbit/django-uwsgi","title":"\u76d1\u6d4b\uff1a"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/","text":"\u53c2\u8003\uff1a \u81ea\u5df1\u5199\u4e00\u4e2a wsgi \u670d\u52a1\u5668\u8fd0\u884c Django \u3001Tornado \u7b49\u6846\u67b6\u5e94\u7528 http server \u00b6 \u9996\u5148\u7f16\u5199\u4e00\u4e2ahttp server\uff0c\u4e86\u89e3\u4e0b\u901a\u4fe1\u6d41\u7a0b\uff1a server\u7aef\uff1a \u521d\u59cb\u5316socker\uff1b \u7ed1\u5b9a\u5957\u63a5\u5b57\u5230\u7aef\u53e3\uff08bind\uff09\uff1b \u76d1\u542c\u7aef\u53e3\uff08listen\uff09\uff1b \u63a5\u6536\u8fde\u63a5\u8bf7\u6c42\uff08accept\uff09\uff1b \u901a\u4fe1\uff08send/recv\uff09\uff1b \u5173\u95ed\u8fde\u63a5\uff08close\uff09\uff1b client\u7aef\uff1a \u521d\u59cb\u5316socket\uff1b \u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\uff08connect\uff09\uff1b \u901a\u4fe1\uff08send/recv\uff09\uff1b \u5173\u95ed\u8fde\u63a5\uff08close\uff09\uff1b server\u793a\u4f8b\u4ee3\u7801\uff1a host_port = ('127.0.0.1', 8000) # 1.\u521d\u59cb\u5316\uff0c\u4f7f\u7528IPv4\u548cTCP\u901a\u4fe1\u534f\u8bae s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 2.\u7ed1\u5b9a\u5730\u5740\u7aef\u53e3 s.bind(host_port) # 3.\u542f\u52a8\u76d1\u542c s.listen(1) print(\"server listening on %s:%s\" % host_port) # 4.\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\uff0c\u63a5\u6536\u8bf7\u6c42 i = 0 while i < 5: sock, addr = s.accept() data = sock.recv(1024) print(\"recv data: %s\" % data) # sock.sendall(b\"ok\") sock.sendall(\"ok\".encode('utf-8')) # \u5173\u95ed sock.close() i += 1 s.close() client\u7aef\u53ef\u4ee5\u7528curl\u6216browser\u4ee3\u66ff\u3002 wsgi server \u00b6 \u7f16\u5199\u4e00\u4e2a\u6807\u51c6\u7684wsgi server\u9700\u8981\u9075\u5faa PEP3333 \u89c4\u8303\u53bb\u7f16\u5199app\u548cserver\u3002 application \u00b6 application\u9700\u8981\u63a5\u6536\u4e24\u4e2a\u53c2\u6570 environ, start_reponse \u4ee5\u4e0b\u5c31\u662f\u7b80\u5355\u7684\u6807\u51c6wsgi app\u793a\u4f8b\uff1a def application(environ, start_response): \"\"\" environ: \u5305\u542b\u8bf7\u6c42\u4fe1\u606f\u53ca\u73af\u5883\u4fe1\u606f\u7684\u5b57\u5178 start_response: \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570`status, response_headers`\u7684\u65b9\u6cd5 \"\"\" status = '200 OK' response_headers = [('Content-Type', 'text/plain')] start_response(status, response_headers) return ['Hello world'] server \u00b6 server\u5b9e\u73b0\u6d41\u7a0b\u5176\u5b9e\u548c\u4e0a\u9762httpserver\u7684\u5b9e\u73b0\u662f\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u4f20\u5165\u5c01\u88c5\u5230environ\u4e2d\uff0c\u7136\u540e\u4e22\u5230app\u5e94\u7528\u4e2d\u53bb\u5904\u7406\uff0c\u5f97\u5230\u5904\u7406\u7ed3\u679c\u518d\u8fd4\u56de\u3002\u4ee5\u4e0b\u662f\u7b80\u5355\u5b9e\u73b0\u4f8b\u5b50 import datetime import socket import sys from io import StringIO class WSGIServer: address_family = socket.AF_INET socket_type = socket.SOCK_STREAM request_queue_size = 5 application = None def __init__(self, server_address): self.socket = socket.socket(self.address_family, self.socket_type) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(server_address) self.socket.listen(self.request_queue_size) self.host, self.port = self.socket.getsockname()[:2] def set_app(self, application): self.application = application def serve_forever(self): while True: self.conn, client_address = self.socket.accept() self.handle_request() def handle_request(self): self.request_data = self.conn.recv(1024).decode() self.request_lines = self.request_data.splitlines() try: self.get_url_parameter() env = self.get_environ() app_data = self.application(env, self.start_response) self.finish_response(app_data) print('[{0}] \"{1}\" {2}'.format( datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), self.request_lines[0], self.status )) except Exception as e: raise e def get_url_parameter(self): self.request_dict = {\"Path\": self.request_lines[0]} for itm in self.request_lines[1:]: if \":\" in itm: self.request_dict[itm.split(\":\")[0]] = itm.split(':')[1] self.request_method, self.path, self.request_version = self.request_dict.get(\"Path\").split() def get_environ(self): env = { 'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', 'wsgi.input': StringIO(self.request_data), 'wsgi.errors': sys.stderr, 'wsgi.multithread': False, 'wsgi.multiprocess': False, 'wsgi.run_once': False, 'REQUEST_METHOD': self.request_method, 'PATH_INFO': self.path, 'SERVER_NAME': self.host, 'SERVER_PORT': self.port, 'USER_AGENT': self.request_dict.get('User-Agent') } return env def start_response(self, status, response_headers): headers = [ ('Date', datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')), ('Server', 'RAPOWSGI0.1') ] self.headers = response_headers + headers self.status = status def finish_response(self, app_data): try: response = 'HTTP/1.1 {status}\\r\\n'.format(status=self.status) for header in self.headers: response += '{0}: {1}\\r\\n'.format(*header) response += '\\r\\n' for data in app_data: response += data self.conn.sendall(response.encode()) finally: self.conn.close() def run(address, application): \"\"\" run: python wsgi_server.py app.app 8000 \"\"\" httpd = WSGIServer(address) httpd.set_app(application) print('RAPOWSGI Server Serving HTTP service on {}'.format(address)) print('{0}'.format(datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT'))) httpd.serve_forever() if __name__ == '__main__': port = '', 8000 if len(sys.argv) < 2: sys.exit('\u8bf7\u63d0\u4f9b\u53ef\u7528\u7684wsgi\u5e94\u7528\u7a0b\u5e8f, \u683c\u5f0f\u4e3a: \u6a21\u5757\u540d.\u5e94\u7528\u540d \u7aef\u53e3\u53f7') elif len(sys.argv) > 2: port = sys.argv[2] app_path = sys.argv[1] module, application = app_path.split('.') module = __import__(module) app = getattr(module, application) run(('', int(port)), app) \u73b0\u5728\u8fd0\u884c python server.py app.application 8000 , \u7136\u540e\u6d4f\u89c8\u5668\u8bbf\u95ee localhost:8000 server\u8fd0\u884c\u8fc7\u7a0b\u89e3\u91ca\uff1a \u521d\u59cb\u5316\uff0c\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u76d1\u542c\u7aef\u53e3\uff1b \u8bbe\u7f6e\u52a0\u8f7d\u7684 web app\uff1b \u5f00\u59cb\u6301\u7eed\u8fd0\u884c server\uff1b \u5904\u7406\u8bbf\u95ee\u8bf7\u6c42\uff1b \u83b7\u53d6\u8bf7\u6c42\u4fe1\u606f\u53ca\u73af\u5883\u4fe1\u606f\uff08 get_environ(self) \uff09\uff1b \u7528 environ \u8fd0\u884c\u52a0\u8f7d\u7684 web app \u5f97\u5230\u8fd4\u56de\u4fe1\u606f\uff1b \u6784\u9020\u8fd4\u56de\u4fe1\u606f\u5934\u90e8\uff1b \u8fd4\u56de\u4fe1\u606f\uff1b middleware \u00b6 \u4e2d\u95f4\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u5728server\u62ff\u5230\u8bf7\u6c42\u6570\u636e\u7ed9app\u5e94\u7528\u524d\uff0c\u505a\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u6bd4\u5982\u9a8c\u8bc1\u3001\u9650\u6d41\u7b49\u7b49\u3002 \u4e0b\u9762\u662f\u4e2a\u7b80\u5355\u8fc7\u6ee4ua\u7684\u4e2d\u95f4\u4ef6\u4f8b\u5b50 class UAMiddleware: \"\"\"\u4e2d\u95f4\u4ef6\uff1a\u7b80\u5355\u8fc7\u6ee4ua\"\"\" def __init__(self, application): self.application = application def __call__(self, env, start_response): if 'curl' in env.get('USER_AGENT'): start_response('403 Not Allowed', []) return [\"not allowed!\"] return self.application(env, start_response) \"\"\" # \u7136\u540e\u5728run\u65b9\u6cd5set_app\u4e2d\u8c03\u7528\uff0c like this def run(address, application): httpd = WSGIServer(address) httpd.set_app(UAMiddleware(application)) ... \"\"\" Django WSGI \u00b6 \u5177\u4f53\u770b\u4ee5\u4e0b\u5b9e\u73b0\u7c7b WSGIHandler WSGIServer WSGIServer # django\\core\\handlers\\wsgi.py class WSGIHandler(base.BaseHandler): pass # django\\core\\servers\\basehttp.py class WSGIServer(simple_server.WSGIServer): \"\"\"BaseHTTPServer that implements the Python WSGI protocol\"\"\" pass # wsgiref.simple_server.py class WSGIServer(HTTPServer): \"\"\"BaseHTTPServer that implements the Python WSGI protocol\"\"\" application = None def server_bind(self): \"\"\"Override server_bind to store the server name.\"\"\" HTTPServer.server_bind(self) self.setup_environ() def setup_environ(self): # Set up base environment env = self.base_environ = {} env['SERVER_NAME'] = self.server_name env['GATEWAY_INTERFACE'] = 'CGI/1.1' env['SERVER_PORT'] = str(self.server_port) env['REMOTE_HOST']='' env['CONTENT_LENGTH']='' env['SCRIPT_NAME'] = '' def get_app(self): return self.application def set_app(self,application): self.application = application Tornado WSGI \u00b6 tornado \u76f4\u63a5\u4ece\u5e95\u5c42\u7528 epoll \u81ea\u5df1\u5b9e\u73b0\u4e86 \u4e8b\u4ef6\u6c60\u64cd\u4f5c\u3001tcp server\u3001http server\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u5f53\u5f02\u6b65\u6846\u67b6\uff0c\u4f46 tornado \u540c\u6837\u4e5f\u63d0\u4f9b\u4e86\u5bf9 wsgi \u5bf9\u652f\u6301\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u6ca1\u529e\u6cd5\u7528 tornado \u5f02\u6b65\u7684\u7279\u6027\u4e86\u3002 \u4e0e\u5176\u8bf4 tornado \u63d0\u4f9b\u4e86 wsgi \u652f\u6301\uff0c\u4e0d\u5982\u8bf4\u5b83\u53ea\u662f\u63d0\u4f9b\u4e86 wsgi \u517c\u5bb9\uff0ctornado \u63d0\u4f9b\u4e24\u79cd\u65b9\u5f0f\uff1a WSGIContainer \u00b6 \u5176\u4ed6\u5e94\u7528\u8981\u5728 tornado server \u8fd0\u884c\uff0c tornado \u63d0\u4f9b WSGIContainer \u3002 WSGIAdapter \u00b6 tornado \u5e94\u7528\u8981\u5728 wsgi server \u4e0a\u8fd0\u884c\uff0c tornado \u63d0\u4f9b WSGIAdapter \u6700\u540e\u6211\u4eec\u6765\u8bd5\u8bd5\u8ba9\u6211\u4eec\u81ea\u5df1\u7684\u670d\u52a1\u5668\u8fd0\u884c tornado app # coding: utf-8 # tornado_wsgi.py from __future__ import unicode_literals import datetime import tornado.web import tornado.wsgi from middleware import TestMiddle from server import WSGIServer class MainHandler(tornado.web.RequestHandler): def get(self): self.write(\"this is a tornado wsgi application\") if __name__ == \"__main__\": application = tornado.web.Application([ (r\"/\", MainHandler), ]) wsgi_app = tornado.wsgi.WSGIAdapter(application) server = WSGIServer(('', 9090)) server.set_application(TestMiddle(wsgi_app)) print('RAPOWSGI Server Serving HTTP service on port {0}'.format(9090)) print('{0}'.format(datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT'))\uff09 server.serve_forever() \u8fd0\u884c\uff1a python tornado_wsgi.py \uff0c\u6253\u5f00\u6d4f\u89c8\u5668\uff1a localhost:9090 \uff0c\u5b8c\u7f8e\u8fd0\u884c\uff0c\u4e2d\u95f4\u4ef6\u4e5f\u8fd0\u884c\u6b63\u5e38","title":"\u624b\u5199\u4e00\u4e2awsgi\u7b80\u5355\u670d\u52a1\u5668"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#http-server","text":"\u9996\u5148\u7f16\u5199\u4e00\u4e2ahttp server\uff0c\u4e86\u89e3\u4e0b\u901a\u4fe1\u6d41\u7a0b\uff1a server\u7aef\uff1a \u521d\u59cb\u5316socker\uff1b \u7ed1\u5b9a\u5957\u63a5\u5b57\u5230\u7aef\u53e3\uff08bind\uff09\uff1b \u76d1\u542c\u7aef\u53e3\uff08listen\uff09\uff1b \u63a5\u6536\u8fde\u63a5\u8bf7\u6c42\uff08accept\uff09\uff1b \u901a\u4fe1\uff08send/recv\uff09\uff1b \u5173\u95ed\u8fde\u63a5\uff08close\uff09\uff1b client\u7aef\uff1a \u521d\u59cb\u5316socket\uff1b \u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\uff08connect\uff09\uff1b \u901a\u4fe1\uff08send/recv\uff09\uff1b \u5173\u95ed\u8fde\u63a5\uff08close\uff09\uff1b server\u793a\u4f8b\u4ee3\u7801\uff1a host_port = ('127.0.0.1', 8000) # 1.\u521d\u59cb\u5316\uff0c\u4f7f\u7528IPv4\u548cTCP\u901a\u4fe1\u534f\u8bae s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 2.\u7ed1\u5b9a\u5730\u5740\u7aef\u53e3 s.bind(host_port) # 3.\u542f\u52a8\u76d1\u542c s.listen(1) print(\"server listening on %s:%s\" % host_port) # 4.\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\uff0c\u63a5\u6536\u8bf7\u6c42 i = 0 while i < 5: sock, addr = s.accept() data = sock.recv(1024) print(\"recv data: %s\" % data) # sock.sendall(b\"ok\") sock.sendall(\"ok\".encode('utf-8')) # \u5173\u95ed sock.close() i += 1 s.close() client\u7aef\u53ef\u4ee5\u7528curl\u6216browser\u4ee3\u66ff\u3002","title":"http server"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#wsgi-server","text":"\u7f16\u5199\u4e00\u4e2a\u6807\u51c6\u7684wsgi server\u9700\u8981\u9075\u5faa PEP3333 \u89c4\u8303\u53bb\u7f16\u5199app\u548cserver\u3002","title":"wsgi server"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#application","text":"application\u9700\u8981\u63a5\u6536\u4e24\u4e2a\u53c2\u6570 environ, start_reponse \u4ee5\u4e0b\u5c31\u662f\u7b80\u5355\u7684\u6807\u51c6wsgi app\u793a\u4f8b\uff1a def application(environ, start_response): \"\"\" environ: \u5305\u542b\u8bf7\u6c42\u4fe1\u606f\u53ca\u73af\u5883\u4fe1\u606f\u7684\u5b57\u5178 start_response: \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570`status, response_headers`\u7684\u65b9\u6cd5 \"\"\" status = '200 OK' response_headers = [('Content-Type', 'text/plain')] start_response(status, response_headers) return ['Hello world']","title":"application"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#server","text":"server\u5b9e\u73b0\u6d41\u7a0b\u5176\u5b9e\u548c\u4e0a\u9762httpserver\u7684\u5b9e\u73b0\u662f\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u4f20\u5165\u5c01\u88c5\u5230environ\u4e2d\uff0c\u7136\u540e\u4e22\u5230app\u5e94\u7528\u4e2d\u53bb\u5904\u7406\uff0c\u5f97\u5230\u5904\u7406\u7ed3\u679c\u518d\u8fd4\u56de\u3002\u4ee5\u4e0b\u662f\u7b80\u5355\u5b9e\u73b0\u4f8b\u5b50 import datetime import socket import sys from io import StringIO class WSGIServer: address_family = socket.AF_INET socket_type = socket.SOCK_STREAM request_queue_size = 5 application = None def __init__(self, server_address): self.socket = socket.socket(self.address_family, self.socket_type) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(server_address) self.socket.listen(self.request_queue_size) self.host, self.port = self.socket.getsockname()[:2] def set_app(self, application): self.application = application def serve_forever(self): while True: self.conn, client_address = self.socket.accept() self.handle_request() def handle_request(self): self.request_data = self.conn.recv(1024).decode() self.request_lines = self.request_data.splitlines() try: self.get_url_parameter() env = self.get_environ() app_data = self.application(env, self.start_response) self.finish_response(app_data) print('[{0}] \"{1}\" {2}'.format( datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), self.request_lines[0], self.status )) except Exception as e: raise e def get_url_parameter(self): self.request_dict = {\"Path\": self.request_lines[0]} for itm in self.request_lines[1:]: if \":\" in itm: self.request_dict[itm.split(\":\")[0]] = itm.split(':')[1] self.request_method, self.path, self.request_version = self.request_dict.get(\"Path\").split() def get_environ(self): env = { 'wsgi.version': (1, 0), 'wsgi.url_scheme': 'http', 'wsgi.input': StringIO(self.request_data), 'wsgi.errors': sys.stderr, 'wsgi.multithread': False, 'wsgi.multiprocess': False, 'wsgi.run_once': False, 'REQUEST_METHOD': self.request_method, 'PATH_INFO': self.path, 'SERVER_NAME': self.host, 'SERVER_PORT': self.port, 'USER_AGENT': self.request_dict.get('User-Agent') } return env def start_response(self, status, response_headers): headers = [ ('Date', datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')), ('Server', 'RAPOWSGI0.1') ] self.headers = response_headers + headers self.status = status def finish_response(self, app_data): try: response = 'HTTP/1.1 {status}\\r\\n'.format(status=self.status) for header in self.headers: response += '{0}: {1}\\r\\n'.format(*header) response += '\\r\\n' for data in app_data: response += data self.conn.sendall(response.encode()) finally: self.conn.close() def run(address, application): \"\"\" run: python wsgi_server.py app.app 8000 \"\"\" httpd = WSGIServer(address) httpd.set_app(application) print('RAPOWSGI Server Serving HTTP service on {}'.format(address)) print('{0}'.format(datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT'))) httpd.serve_forever() if __name__ == '__main__': port = '', 8000 if len(sys.argv) < 2: sys.exit('\u8bf7\u63d0\u4f9b\u53ef\u7528\u7684wsgi\u5e94\u7528\u7a0b\u5e8f, \u683c\u5f0f\u4e3a: \u6a21\u5757\u540d.\u5e94\u7528\u540d \u7aef\u53e3\u53f7') elif len(sys.argv) > 2: port = sys.argv[2] app_path = sys.argv[1] module, application = app_path.split('.') module = __import__(module) app = getattr(module, application) run(('', int(port)), app) \u73b0\u5728\u8fd0\u884c python server.py app.application 8000 , \u7136\u540e\u6d4f\u89c8\u5668\u8bbf\u95ee localhost:8000 server\u8fd0\u884c\u8fc7\u7a0b\u89e3\u91ca\uff1a \u521d\u59cb\u5316\uff0c\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u76d1\u542c\u7aef\u53e3\uff1b \u8bbe\u7f6e\u52a0\u8f7d\u7684 web app\uff1b \u5f00\u59cb\u6301\u7eed\u8fd0\u884c server\uff1b \u5904\u7406\u8bbf\u95ee\u8bf7\u6c42\uff1b \u83b7\u53d6\u8bf7\u6c42\u4fe1\u606f\u53ca\u73af\u5883\u4fe1\u606f\uff08 get_environ(self) \uff09\uff1b \u7528 environ \u8fd0\u884c\u52a0\u8f7d\u7684 web app \u5f97\u5230\u8fd4\u56de\u4fe1\u606f\uff1b \u6784\u9020\u8fd4\u56de\u4fe1\u606f\u5934\u90e8\uff1b \u8fd4\u56de\u4fe1\u606f\uff1b","title":"server"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#middleware","text":"\u4e2d\u95f4\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u5728server\u62ff\u5230\u8bf7\u6c42\u6570\u636e\u7ed9app\u5e94\u7528\u524d\uff0c\u505a\u4e00\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u6bd4\u5982\u9a8c\u8bc1\u3001\u9650\u6d41\u7b49\u7b49\u3002 \u4e0b\u9762\u662f\u4e2a\u7b80\u5355\u8fc7\u6ee4ua\u7684\u4e2d\u95f4\u4ef6\u4f8b\u5b50 class UAMiddleware: \"\"\"\u4e2d\u95f4\u4ef6\uff1a\u7b80\u5355\u8fc7\u6ee4ua\"\"\" def __init__(self, application): self.application = application def __call__(self, env, start_response): if 'curl' in env.get('USER_AGENT'): start_response('403 Not Allowed', []) return [\"not allowed!\"] return self.application(env, start_response) \"\"\" # \u7136\u540e\u5728run\u65b9\u6cd5set_app\u4e2d\u8c03\u7528\uff0c like this def run(address, application): httpd = WSGIServer(address) httpd.set_app(UAMiddleware(application)) ... \"\"\"","title":"middleware"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#django-wsgi","text":"\u5177\u4f53\u770b\u4ee5\u4e0b\u5b9e\u73b0\u7c7b WSGIHandler WSGIServer WSGIServer # django\\core\\handlers\\wsgi.py class WSGIHandler(base.BaseHandler): pass # django\\core\\servers\\basehttp.py class WSGIServer(simple_server.WSGIServer): \"\"\"BaseHTTPServer that implements the Python WSGI protocol\"\"\" pass # wsgiref.simple_server.py class WSGIServer(HTTPServer): \"\"\"BaseHTTPServer that implements the Python WSGI protocol\"\"\" application = None def server_bind(self): \"\"\"Override server_bind to store the server name.\"\"\" HTTPServer.server_bind(self) self.setup_environ() def setup_environ(self): # Set up base environment env = self.base_environ = {} env['SERVER_NAME'] = self.server_name env['GATEWAY_INTERFACE'] = 'CGI/1.1' env['SERVER_PORT'] = str(self.server_port) env['REMOTE_HOST']='' env['CONTENT_LENGTH']='' env['SCRIPT_NAME'] = '' def get_app(self): return self.application def set_app(self,application): self.application = application","title":"Django WSGI"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#tornado-wsgi","text":"tornado \u76f4\u63a5\u4ece\u5e95\u5c42\u7528 epoll \u81ea\u5df1\u5b9e\u73b0\u4e86 \u4e8b\u4ef6\u6c60\u64cd\u4f5c\u3001tcp server\u3001http server\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u5f53\u5f02\u6b65\u6846\u67b6\uff0c\u4f46 tornado \u540c\u6837\u4e5f\u63d0\u4f9b\u4e86\u5bf9 wsgi \u5bf9\u652f\u6301\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u6ca1\u529e\u6cd5\u7528 tornado \u5f02\u6b65\u7684\u7279\u6027\u4e86\u3002 \u4e0e\u5176\u8bf4 tornado \u63d0\u4f9b\u4e86 wsgi \u652f\u6301\uff0c\u4e0d\u5982\u8bf4\u5b83\u53ea\u662f\u63d0\u4f9b\u4e86 wsgi \u517c\u5bb9\uff0ctornado \u63d0\u4f9b\u4e24\u79cd\u65b9\u5f0f\uff1a","title":"Tornado WSGI"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#wsgicontainer","text":"\u5176\u4ed6\u5e94\u7528\u8981\u5728 tornado server \u8fd0\u884c\uff0c tornado \u63d0\u4f9b WSGIContainer \u3002","title":"WSGIContainer"},{"location":"python%E7%AC%94%E8%AE%B0/wsgi/%E5%86%99%E4%B8%80%E4%B8%AAwsgi%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/#wsgiadapter","text":"tornado \u5e94\u7528\u8981\u5728 wsgi server \u4e0a\u8fd0\u884c\uff0c tornado \u63d0\u4f9b WSGIAdapter \u6700\u540e\u6211\u4eec\u6765\u8bd5\u8bd5\u8ba9\u6211\u4eec\u81ea\u5df1\u7684\u670d\u52a1\u5668\u8fd0\u884c tornado app # coding: utf-8 # tornado_wsgi.py from __future__ import unicode_literals import datetime import tornado.web import tornado.wsgi from middleware import TestMiddle from server import WSGIServer class MainHandler(tornado.web.RequestHandler): def get(self): self.write(\"this is a tornado wsgi application\") if __name__ == \"__main__\": application = tornado.web.Application([ (r\"/\", MainHandler), ]) wsgi_app = tornado.wsgi.WSGIAdapter(application) server = WSGIServer(('', 9090)) server.set_application(TestMiddle(wsgi_app)) print('RAPOWSGI Server Serving HTTP service on port {0}'.format(9090)) print('{0}'.format(datetime.datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT'))\uff09 server.serve_forever() \u8fd0\u884c\uff1a python tornado_wsgi.py \uff0c\u6253\u5f00\u6d4f\u89c8\u5668\uff1a localhost:9090 \uff0c\u5b8c\u7f8e\u8fd0\u884c\uff0c\u4e2d\u95f4\u4ef6\u4e5f\u8fd0\u884c\u6b63\u5e38","title":"WSGIAdapter"}]}